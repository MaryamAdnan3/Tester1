# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class FormParamsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    @response_catcher = HttpResponseCatcher.new
    @controller = FormParamsController.new CONFIG, http_call_back: @response_catcher
  end

  # Todo: Add description for test test_delete_form_test
  def test_delete_form_test()
    # Parameters for the API call
    body = DeleteBody.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan","field":"QA"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_delete_form(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_delete_form_test_with_multiliner_name
  def test_delete_form_test_with_multiliner_name()
    # Parameters for the API call
    body = DeleteBody.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan\\nnouman","field":"QA"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_delete_form(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_delete_form_test_with_special_characters_field
  def test_delete_form_test_with_special_characters_field()
    # Parameters for the API call
    body = DeleteBody.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan","field":"&&&"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_delete_form(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_delete_form_test_with_blank_field
  def test_delete_form_test_with_blank_field()
    # Parameters for the API call
    body = DeleteBody.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan","field":" "}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_delete_form(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_delete_form_test_with_blank_name_field
  def test_delete_form_test_with_blank_name_field()
    # Parameters for the API call
    body = DeleteBody.from_hash(APIHelper.json_deserialize(
      '{"name":" ","field":" "}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_delete_form(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_delete_form_test_with_blank_name
  def test_delete_form_test_with_blank_name()
    # Parameters for the API call
    body = DeleteBody.from_hash(APIHelper.json_deserialize(
      '{"name":" ","field":"QA"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_delete_form(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_date_array
  def test_send_date_array()
    # Parameters for the API call
    dates = APIHelper.json_deserialize(
      '["1994-02-13","1994-02-13"]'
    ).map { |element| Date.iso8601(element) }

    # Perform the API call through the SDK function
    result = @controller.send_date_array(dates)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_date
  def test_send_date()
    # Parameters for the API call
    date = Date.parse('1994-02-13')

    # Perform the API call through the SDK function
    result = @controller.send_date(date)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_unix_date_time
  def test_send_unix_date_time()
    # Parameters for the API call
    datetime = Time.at(1484719381).utc.to_datetime

    # Perform the API call through the SDK function
    result = @controller.send_unix_date_time(datetime)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc1123_date_time
  def test_send_rfc1123_date_time()
    # Parameters for the API call
    datetime = DateTime.httpdate('Sun, 06 Nov 1994 08:49:37 GMT')

    # Perform the API call through the SDK function
    result = @controller.send_rfc1123_date_time(datetime)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc3339_date_time
  def test_send_rfc3339_date_time()
    # Parameters for the API call
    datetime = DateTime.rfc3339('1994-02-13T14:01:54.9571247Z')

    # Perform the API call through the SDK function
    result = @controller.send_rfc3339_date_time(datetime)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_unix_date_time_array
  def test_send_unix_date_time_array()
    # Parameters for the API call
    datetimes = APIHelper.json_deserialize(
      '[1484719381,1484719381]'
    ).map { |element| Time.at(element).utc.to_datetime }

    # Perform the API call through the SDK function
    result = @controller.send_unix_date_time_array(datetimes)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc1123_date_time_array
  def test_send_rfc1123_date_time_array()
    # Parameters for the API call
    datetimes = APIHelper.json_deserialize(
      '["Sun, 06 Nov 1994 08:49:37 GMT","Sun, 06 Nov 1994 08:49:37 GMT"]'
    ).map { |element| DateTime.httpdate(element) }

    # Perform the API call through the SDK function
    result = @controller.send_rfc1123_date_time_array(datetimes)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_long
  def test_send_long()
    # Parameters for the API call
    value = 5147483647

    # Perform the API call through the SDK function
    result = @controller.send_long(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_integer_array
  def test_send_integer_array()
    # Parameters for the API call
    integers = APIHelper.json_deserialize(
      '[1,2,3,4,5]'
    )

    # Perform the API call through the SDK function
    result = @controller.send_integer_array(integers)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_array
  def test_send_string_array()
    # Parameters for the API call
    strings = APIHelper.json_deserialize(
      '["abc","def"]'
    )

    # Perform the API call through the SDK function
    result = @controller.send_string_array(strings)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_allow_dynamic_form_fields
  def test_allow_dynamic_form_fields()
    # Parameters for the API call
    name = 'farhan'

    # dictionary for optional form parameters
    optional_form_parameters = {}
    optional_form_parameters['field'] =  'QA'

    # Perform the API call through the SDK function
    result = @controller.allow_dynamic_form_fields(name, _field_parameters: optional_form_parameters)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_model
  def test_send_model()
    # Parameters for the API call
    model = Employee.from_hash(APIHelper.json_deserialize(
      '{"name":"Shahid Khaliq","age":5147483645,"address":"H # 531, S # 20","u'\
      'id":"123321","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.9'\
      '571247Z","salary":20000,"department":"Software Development","joiningDay'\
      '":"Saturday","workingDays":["Monday","Tuesday","Friday"],"boss":{"perso'\
      'nType":"Boss","name":"Zeeshan Ejaz","age":5147483645,"address":"H # 531'\
      ', S # 20","uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-1'\
      '3T14:01:54.9571247Z","salary":20000,"department":"Software Development"'\
      ',"joiningDay":"Saturday","workingDays":["Monday","Tuesday","Friday"],"d'\
      'ependents":[{"name":"Future Wife","age":5147483649,"address":"H # 531, '\
      'S # 20","uid":"123412","birthday":"1994-02-13","birthtime":"1994-02-13T'\
      '14:01:54.9571247Z"},{"name":"Future Kid","age":5147483648,"address":"H '\
      '# 531, S # 20","uid":"312341","birthday":"1994-02-13","birthtime":"1994'\
      '-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT","'\
      'promotedAt":1484719381},"dependents":[{"name":"Future Wife","age":51474'\
      '83649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-13'\
      '","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","age'\
      '":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"199'\
      '4-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, 0'\
      '6 Nov 1994 08:49:37 GMT"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_model(model)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_model_array
  def test_send_model_array()
    # Parameters for the API call
    models = APIHelper.json_deserialize(
      '[{"name":"Shahid Khaliq","age":5147483645,"address":"H # 531, S # 20","'\
      'uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.'\
      '9571247Z","salary":20000,"department":"Software Development","joiningDa'\
      'y":"Saturday","workingDays":["Monday","Tuesday","Friday"],"boss":{"pers'\
      'onType":"Boss","name":"Zeeshan Ejaz","age":5147483645,"address":"H # 53'\
      '1, S # 20","uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-'\
      '13T14:01:54.9571247Z","salary":20000,"department":"Software Development'\
      '","joiningDay":"Saturday","workingDays":["Monday","Tuesday","Friday"],"'\
      'dependents":[{"name":"Future Wife","age":5147483649,"address":"H # 531,'\
      ' S # 20","uid":"123412","birthday":"1994-02-13","birthtime":"1994-02-13'\
      'T14:01:54.9571247Z"},{"name":"Future Kid","age":5147483648,"address":"H'\
      ' # 531, S # 20","uid":"312341","birthday":"1994-02-13","birthtime":"199'\
      '4-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT",'\
      '"promotedAt":1484719381},"dependents":[{"name":"Future Wife","age":5147'\
      '483649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-1'\
      '3","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","ag'\
      'e":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"19'\
      '94-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, '\
      '06 Nov 1994 08:49:37 GMT"},{"name":"Shahid Khaliq","age":5147483645,"ad'\
      'dress":"H # 531, S # 20","uid":"123321","birthday":"1994-02-13","birtht'\
      'ime":"1994-02-13T14:01:54.9571247Z","salary":20000,"department":"Softwa'\
      're Development","joiningDay":"Saturday","workingDays":["Monday","Tuesda'\
      'y","Friday"],"boss":{"personType":"Boss","name":"Zeeshan Ejaz","age":51'\
      '47483645,"address":"H # 531, S # 20","uid":"123321","birthday":"1994-02'\
      '-13","birthtime":"1994-02-13T14:01:54.9571247Z","salary":20000,"departm'\
      'ent":"Software Development","joiningDay":"Saturday","workingDays":["Mon'\
      'day","Tuesday","Friday"],"dependents":[{"name":"Future Wife","age":5147'\
      '483649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-1'\
      '3","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","ag'\
      'e":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"19'\
      '94-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, '\
      '06 Nov 1994 08:49:37 GMT","promotedAt":1484719381},"dependents":[{"name'\
      '":"Future Wife","age":5147483649,"address":"H # 531, S # 20","uid":"123'\
      '412","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"'\
      '},{"name":"Future Kid","age":5147483648,"address":"H # 531, S # 20","ui'\
      'd":"312341","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.95'\
      '71247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT"}]'
    ).map { |element| Employee.from_hash(element) }

    # Perform the API call through the SDK function
    result = @controller.send_model_array(models)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_file
  def test_send_file()
    # Parameters for the API call
    file = File::open(TestHelper.get_file('http://localhost:3000/response/image'))

    # Perform the API call through the SDK function
    result = @controller.send_file(file)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_multiple_files
  def test_send_multiple_files()
    # Parameters for the API call
    file = File::open(TestHelper.get_file('http://localhost:3000/response/image'))
    file1 = File::open(TestHelper.get_file('http://localhost:3000/response/image'))

    # Perform the API call through the SDK function
    result = @controller.send_multiple_files(file, file1)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Todo: Add description for test test_send_string
  def test_send_string()
    # Parameters for the API call
    value = 'TestString'

    # Perform the API call through the SDK function
    result = @controller.send_string(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_multiliner_string
  def test_send_multiliner_string()
    # Parameters for the API call
    value = "TestString\nnouman"

    # Perform the API call through the SDK function
    result = @controller.send_string(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_with_special_characters
  def test_send_string_with_special_characters()
    # Parameters for the API call
    value = '$%^!@#$%^&*'

    # Perform the API call through the SDK function
    result = @controller.send_string(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_with_only_space
  def test_send_string_with_only_space()
    # Parameters for the API call
    value = ' '

    # Perform the API call through the SDK function
    result = @controller.send_string(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_empty_string
  def test_send_empty_string()
    # Parameters for the API call
    value = ''

    # Perform the API call through the SDK function
    result = @controller.send_string(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc3339_date_time_array
  def test_send_rfc3339_date_time_array()
    # Parameters for the API call
    datetimes = APIHelper.json_deserialize(
      '["1994-02-13T14:01:54.9571247Z","1994-02-13T14:01:54.9571247Z"]'
    ).map { |element| DateTime.rfc3339(element) }

    # Perform the API call through the SDK function
    result = @controller.send_rfc3339_date_time_array(datetimes)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_mixed_array
  def test_send_mixed_array()
    # Parameters for the API call
    options = {}
    options['file'] = File::open(TestHelper.get_file('http://localhost:3000/response/image'))
    options['integers'] = APIHelper.json_deserialize(
      '[1,2,3,4,5]'
    )
    options['models'] = APIHelper.json_deserialize(
      '[{"name":"Shahid Khaliq","age":5147483645,"address":"H # 531, S # 20","'\
      'uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.'\
      '9571247Z","salary":20000,"department":"Software Development","joiningDa'\
      'y":"Saturday","workingDays":["Monday","Tuesday","Friday"],"boss":{"pers'\
      'onType":"Boss","name":"Zeeshan Ejaz","age":5147483645,"address":"H # 53'\
      '1, S # 20","uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-'\
      '13T14:01:54.9571247Z","salary":20000,"department":"Software Development'\
      '","joiningDay":"Saturday","workingDays":["Monday","Tuesday","Friday"],"'\
      'dependents":[{"name":"Future Wife","age":5147483649,"address":"H # 531,'\
      ' S # 20","uid":"123412","birthday":"1994-02-13","birthtime":"1994-02-13'\
      'T14:01:54.9571247Z"},{"name":"Future Kid","age":5147483648,"address":"H'\
      ' # 531, S # 20","uid":"312341","birthday":"1994-02-13","birthtime":"199'\
      '4-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT",'\
      '"promotedAt":1484719381},"dependents":[{"name":"Future Wife","age":5147'\
      '483649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-1'\
      '3","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","ag'\
      'e":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"19'\
      '94-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, '\
      '06 Nov 1994 08:49:37 GMT"},{"name":"Shahid Khaliq","age":5147483645,"ad'\
      'dress":"H # 531, S # 20","uid":"123321","birthday":"1994-02-13","birtht'\
      'ime":"1994-02-13T14:01:54.9571247Z","salary":20000,"department":"Softwa'\
      're Development","joiningDay":"Saturday","workingDays":["Monday","Tuesda'\
      'y","Friday"],"boss":{"personType":"Boss","name":"Zeeshan Ejaz","age":51'\
      '47483645,"address":"H # 531, S # 20","uid":"123321","birthday":"1994-02'\
      '-13","birthtime":"1994-02-13T14:01:54.9571247Z","salary":20000,"departm'\
      'ent":"Software Development","joiningDay":"Saturday","workingDays":["Mon'\
      'day","Tuesday","Friday"],"dependents":[{"name":"Future Wife","age":5147'\
      '483649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-1'\
      '3","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","ag'\
      'e":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"19'\
      '94-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, '\
      '06 Nov 1994 08:49:37 GMT","promotedAt":1484719381},"dependents":[{"name'\
      '":"Future Wife","age":5147483649,"address":"H # 531, S # 20","uid":"123'\
      '412","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"'\
      '},{"name":"Future Kid","age":5147483648,"address":"H # 531, S # 20","ui'\
      'd":"312341","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.95'\
      '71247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT"}]'
    ).map { |element| Employee.from_hash(element) }
    options['strings'] = APIHelper.json_deserialize(
      '["abc","def"]'
    )

    # Perform the API call through the SDK function
    result = @controller.send_mixed_array(options)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_update_model_with_form
  def test_update_model_with_form()
    # Parameters for the API call
    model = Employee.from_hash(APIHelper.json_deserialize(
      '{"name":"Shahid Khaliq","age":5147483645,"address":"H # 531, S # 20","u'\
      'id":"123321","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.9'\
      '571247Z","salary":20000,"department":"Software Development","joiningDay'\
      '":"Saturday","workingDays":["Monday","Tuesday","Friday"],"boss":{"perso'\
      'nType":"Boss","name":"Zeeshan Ejaz","age":5147483645,"address":"H # 531'\
      ', S # 20","uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-1'\
      '3T14:01:54.9571247Z","salary":20000,"department":"Software Development"'\
      ',"joiningDay":"Saturday","workingDays":["Monday","Tuesday","Friday"],"d'\
      'ependents":[{"name":"Future Wife","age":5147483649,"address":"H # 531, '\
      'S # 20","uid":"123412","birthday":"1994-02-13","birthtime":"1994-02-13T'\
      '14:01:54.9571247Z"},{"name":"Future Kid","age":5147483648,"address":"H '\
      '# 531, S # 20","uid":"312341","birthday":"1994-02-13","birthtime":"1994'\
      '-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT","'\
      'promotedAt":1484719381},"dependents":[{"name":"Future Wife","age":51474'\
      '83649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-13'\
      '","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","age'\
      '":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"199'\
      '4-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, 0'\
      '6 Nov 1994 08:49:37 GMT"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.update_model_with_form(model)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_delete_form_test_with_model
  def test_delete_form_test_with_model()
    # Parameters for the API call
    model = Employee.from_hash(APIHelper.json_deserialize(
      '{"name":"Shahid Khaliq","age":5147483645,"address":"H # 531, S # 20","u'\
      'id":"123321","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.9'\
      '571247Z","salary":20000,"department":"Software Development","joiningDay'\
      '":"Saturday","workingDays":["Monday","Tuesday","Friday"],"boss":{"perso'\
      'nType":"Boss","name":"Zeeshan Ejaz","age":5147483645,"address":"H # 531'\
      ', S # 20","uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-1'\
      '3T14:01:54.9571247Z","salary":20000,"department":"Software Development"'\
      ',"joiningDay":"Saturday","workingDays":["Monday","Tuesday","Friday"],"d'\
      'ependents":[{"name":"Future Wife","age":5147483649,"address":"H # 531, '\
      'S # 20","uid":"123412","birthday":"1994-02-13","birthtime":"1994-02-13T'\
      '14:01:54.9571247Z"},{"name":"Future Kid","age":5147483648,"address":"H '\
      '# 531, S # 20","uid":"312341","birthday":"1994-02-13","birthtime":"1994'\
      '-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT","'\
      'promotedAt":1484719381},"dependents":[{"name":"Future Wife","age":51474'\
      '83649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-13'\
      '","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","age'\
      '":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"199'\
      '4-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, 0'\
      '6 Nov 1994 08:49:37 GMT"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_delete_form1(model)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_delete_form_with_model_array
  def test_send_delete_form_with_model_array()
    # Parameters for the API call
    models = APIHelper.json_deserialize(
      '[{"name":"Shahid Khaliq","age":5147483645,"address":"H # 531, S # 20","'\
      'uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.'\
      '9571247Z","salary":20000,"department":"Software Development","joiningDa'\
      'y":"Saturday","workingDays":["Monday","Tuesday","Friday"],"boss":{"pers'\
      'onType":"Boss","name":"Zeeshan Ejaz","age":5147483645,"address":"H # 53'\
      '1, S # 20","uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-'\
      '13T14:01:54.9571247Z","salary":20000,"department":"Software Development'\
      '","joiningDay":"Saturday","workingDays":["Monday","Tuesday","Friday"],"'\
      'dependents":[{"name":"Future Wife","age":5147483649,"address":"H # 531,'\
      ' S # 20","uid":"123412","birthday":"1994-02-13","birthtime":"1994-02-13'\
      'T14:01:54.9571247Z"},{"name":"Future Kid","age":5147483648,"address":"H'\
      ' # 531, S # 20","uid":"312341","birthday":"1994-02-13","birthtime":"199'\
      '4-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT",'\
      '"promotedAt":1484719381},"dependents":[{"name":"Future Wife","age":5147'\
      '483649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-1'\
      '3","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","ag'\
      'e":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"19'\
      '94-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, '\
      '06 Nov 1994 08:49:37 GMT"},{"name":"Shahid Khaliq","age":5147483645,"ad'\
      'dress":"H # 531, S # 20","uid":"123321","birthday":"1994-02-13","birtht'\
      'ime":"1994-02-13T14:01:54.9571247Z","salary":20000,"department":"Softwa'\
      're Development","joiningDay":"Saturday","workingDays":["Monday","Tuesda'\
      'y","Friday"],"boss":{"personType":"Boss","name":"Zeeshan Ejaz","age":51'\
      '47483645,"address":"H # 531, S # 20","uid":"123321","birthday":"1994-02'\
      '-13","birthtime":"1994-02-13T14:01:54.9571247Z","salary":20000,"departm'\
      'ent":"Software Development","joiningDay":"Saturday","workingDays":["Mon'\
      'day","Tuesday","Friday"],"dependents":[{"name":"Future Wife","age":5147'\
      '483649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-1'\
      '3","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","ag'\
      'e":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"19'\
      '94-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, '\
      '06 Nov 1994 08:49:37 GMT","promotedAt":1484719381},"dependents":[{"name'\
      '":"Future Wife","age":5147483649,"address":"H # 531, S # 20","uid":"123'\
      '412","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"'\
      '},{"name":"Future Kid","age":5147483648,"address":"H # 531, S # 20","ui'\
      'd":"312341","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.95'\
      '71247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT"}]'
    ).map { |element| Employee.from_hash(element) }

    # Perform the API call through the SDK function
    result = @controller.send_delete_form_with_model_array(models)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_update_model_array_with_form
  def test_update_model_array_with_form()
    # Parameters for the API call
    models = APIHelper.json_deserialize(
      '[{"name":"Shahid Khaliq","age":5147483645,"address":"H # 531, S # 20","'\
      'uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.'\
      '9571247Z","salary":20000,"department":"Software Development","joiningDa'\
      'y":"Saturday","workingDays":["Monday","Tuesday","Friday"],"boss":{"pers'\
      'onType":"Boss","name":"Zeeshan Ejaz","age":5147483645,"address":"H # 53'\
      '1, S # 20","uid":"123321","birthday":"1994-02-13","birthtime":"1994-02-'\
      '13T14:01:54.9571247Z","salary":20000,"department":"Software Development'\
      '","joiningDay":"Saturday","workingDays":["Monday","Tuesday","Friday"],"'\
      'dependents":[{"name":"Future Wife","age":5147483649,"address":"H # 531,'\
      ' S # 20","uid":"123412","birthday":"1994-02-13","birthtime":"1994-02-13'\
      'T14:01:54.9571247Z"},{"name":"Future Kid","age":5147483648,"address":"H'\
      ' # 531, S # 20","uid":"312341","birthday":"1994-02-13","birthtime":"199'\
      '4-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT",'\
      '"promotedAt":1484719381},"dependents":[{"name":"Future Wife","age":5147'\
      '483649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-1'\
      '3","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","ag'\
      'e":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"19'\
      '94-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, '\
      '06 Nov 1994 08:49:37 GMT"},{"name":"Shahid Khaliq","age":5147483645,"ad'\
      'dress":"H # 531, S # 20","uid":"123321","birthday":"1994-02-13","birtht'\
      'ime":"1994-02-13T14:01:54.9571247Z","salary":20000,"department":"Softwa'\
      're Development","joiningDay":"Saturday","workingDays":["Monday","Tuesda'\
      'y","Friday"],"boss":{"personType":"Boss","name":"Zeeshan Ejaz","age":51'\
      '47483645,"address":"H # 531, S # 20","uid":"123321","birthday":"1994-02'\
      '-13","birthtime":"1994-02-13T14:01:54.9571247Z","salary":20000,"departm'\
      'ent":"Software Development","joiningDay":"Saturday","workingDays":["Mon'\
      'day","Tuesday","Friday"],"dependents":[{"name":"Future Wife","age":5147'\
      '483649,"address":"H # 531, S # 20","uid":"123412","birthday":"1994-02-1'\
      '3","birthtime":"1994-02-13T14:01:54.9571247Z"},{"name":"Future Kid","ag'\
      'e":5147483648,"address":"H # 531, S # 20","uid":"312341","birthday":"19'\
      '94-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"}],"hiredAt":"Sun, '\
      '06 Nov 1994 08:49:37 GMT","promotedAt":1484719381},"dependents":[{"name'\
      '":"Future Wife","age":5147483649,"address":"H # 531, S # 20","uid":"123'\
      '412","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.9571247Z"'\
      '},{"name":"Future Kid","age":5147483648,"address":"H # 531, S # 20","ui'\
      'd":"312341","birthday":"1994-02-13","birthtime":"1994-02-13T14:01:54.95'\
      '71247Z"}],"hiredAt":"Sun, 06 Nov 1994 08:49:37 GMT"}]'
    ).map { |element| Employee.from_hash(element) }

    # Perform the API call through the SDK function
    result = @controller.update_model_array_with_form(models)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_update_string_with_form
  def test_update_string_with_form()
    # Parameters for the API call
    value = 'TestString'

    # Perform the API call through the SDK function
    result = @controller.update_string_with_form(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_update_special_string_with_form
  def test_update_special_string_with_form()
    # Parameters for the API call
    value = '$%^!@#$%^&*'

    # Perform the API call through the SDK function
    result = @controller.update_string_with_form(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_update_multiliner_string_with_form
  def test_update_multiliner_string_with_form()
    # Parameters for the API call
    value = "TestString\nnouman"

    # Perform the API call through the SDK function
    result = @controller.update_string_with_form(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_update_string_with_form_corner_case
  def test_update_string_with_form_corner_case()
    # Parameters for the API call
    value = ' '

    # Perform the API call through the SDK function
    result = @controller.update_string_with_form(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_update_empty_string_with_form
  def test_update_empty_string_with_form()
    # Parameters for the API call
    value = ''

    # Perform the API call through the SDK function
    result = @controller.update_string_with_form(value)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_update_string_array_with_form
  def test_update_string_array_with_form()
    # Parameters for the API call
    strings = APIHelper.json_deserialize(
      '["abc","def"]'
    )

    # Perform the API call through the SDK function
    result = @controller.update_string_array_with_form(strings)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_integer_enum_array
  def test_send_integer_enum_array()
    # Parameters for the API call
    suites = APIHelper.json_deserialize(
      '[1,3,4,2,3]'
    )

    # Perform the API call through the SDK function
    result = @controller.send_integer_enum_array(suites)

    # Test response code
    assert([*200..208].include? @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_enum_array
  def test_send_string_enum_array()
    # Parameters for the API call
    days = APIHelper.json_deserialize(
      '["Tuesday","Saturday","Wednesday","Monday","Sunday"]'
    )

    # Perform the API call through the SDK function
    result = @controller.send_string_enum_array(days)

    # Test response code
    assert([*200..208].include? @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_in_form_with_new_line1
  def test_send_string_in_form_with_new_line1()
    # Parameters for the API call
    body = TestNstringEncoding.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan","field":"QA"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_string_in_form_with_new_line(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_in_form_with_new_line2
  def test_send_string_in_form_with_new_line2()
    # Parameters for the API call
    body = TestNstringEncoding.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan","field":"QA&Dev"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_string_in_form_with_new_line(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_in_form_with_new_line3
  def test_send_string_in_form_with_new_line3()
    # Parameters for the API call
    body = TestNstringEncoding.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan&nouman","field":"QA"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_string_in_form_with_new_line(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_in_form_with_r1
  def test_send_string_in_form_with_r1()
    # Parameters for the API call
    body = TestRstringEncoding.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan","field":"QA"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_string_in_form_with_r(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_in_form_with_r2
  def test_send_string_in_form_with_r2()
    # Parameters for the API call
    body = TestRstringEncoding.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan","field":"QA&Dev"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_string_in_form_with_r(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_in_form_with_r3
  def test_send_string_in_form_with_r3()
    # Parameters for the API call
    body = TestRstringEncoding.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan&nouman","field":"QA"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_string_in_form_with_r(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_in_form_with_r_n1
  def test_send_string_in_form_with_r_n1()
    # Parameters for the API call
    body = TestRNstringEncoding.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan","field":"QA"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_string_in_form_with_r_n(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_in_form_with_r_n2
  def test_send_string_in_form_with_r_n2()
    # Parameters for the API call
    body = TestRNstringEncoding.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan","field":"QA&Dev"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_string_in_form_with_r_n(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_string_in_form_with_r_n3
  def test_send_string_in_form_with_r_n3()
    # Parameters for the API call
    body = TestRNstringEncoding.from_hash(APIHelper.json_deserialize(
      '{"name":"farhan&nouman","field":"QA"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_string_in_form_with_r_n(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_unix_time_stamp_in_body
  def test_send_optional_unix_time_stamp_in_body()
    # Parameters for the API call
    date_time = Time.at(1484719381).utc.to_datetime

    # Perform the API call through the SDK function
    result = @controller.send_optional_unix_date_time_in_body(date_time: date_time)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_rfc_1123_in_body
  def test_send_optional_rfc_1123_in_body()
    # Parameters for the API call
    body = DateTime.httpdate('Sun, 06 Nov 1994 08:49:37 GMT')

    # Perform the API call through the SDK function
    result = @controller.send_optional_rfc1123_in_body(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_sending_datetime_as_optional_in_plain_text_body
  def test_sending_datetime_as_optional_in_plain_text_body()
    # Parameters for the API call
    body = DateTime.rfc3339('1994-02-13T14:01:54.9571247Z')

    # Perform the API call through the SDK function
    result = @controller.send_datetime_optional_in_endpoint(body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_unix_time_stamp_in_model_body
  def test_send_optional_unix_time_stamp_in_model_body()
    # Parameters for the API call
    date_time = UnixDateTime.from_hash(APIHelper.json_deserialize(
      '{"dateTime":1484719381}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_optional_unix_time_stamp_in_model_body(date_time)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_unix_time_stamp_in_nested_model_body
  def test_send_optional_unix_time_stamp_in_nested_model_body()
    # Parameters for the API call
    date_time = SendUnixDateTime.from_hash(APIHelper.json_deserialize(
      '{"dateTime":{"dateTime":1484719381}}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_optional_unix_time_stamp_in_nested_model_body(date_time)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_sending_rfc1123_date_time_in_nested_mode
  def test_sending_rfc1123_date_time_in_nested_mode()
    # Parameters for the API call
    body = SendRfc1123DateTime.from_hash(APIHelper.json_deserialize(
      '{"dateTime":{"dateTime":"Sun, 06 Nov 1994 08:49:37 GMT"}}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_rfc1123_date_time_in_nested_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_rfc1123_date_time_in_model_body
  def test_send_optional_rfc1123_date_time_in_model_body()
    # Parameters for the API call
    date_time = ModelWithOptionalRfc1123DateTime.from_hash(APIHelper.json_deserialize(
      '{"dateTime":"Sun, 06 Nov 1994 08:49:37 GMT"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_rfc1123_date_time_in_model(date_time)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_optional_datetime_in_model_as_body
  def test_send_optional_datetime_in_model_as_body()
    # Parameters for the API call
    body = ModelWithOptionalRfc3339DateTime.from_hash(APIHelper.json_deserialize(
      '{"dateTime":"1994-02-13T14:01:54.9571247Z"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_optional_datetime_in_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc3339_date_time_in_nested_model
  def test_send_rfc3339_date_time_in_nested_model()
    # Parameters for the API call
    body = SendRfc339DateTime.from_hash(APIHelper.json_deserialize(
      '{"dateTime":{"dateTime":"1994-02-13T14:01:54.9571247Z"}}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_rfc339_date_time_in_nested_models(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_uuid_as_optional
  def test_uuid_as_optional()
    # Parameters for the API call
    body = UuidAsOptional.from_hash(APIHelper.json_deserialize(
      '{"uuid":"123e4567-e89b-12d3-a456-426655440000"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.uuid_as_optional(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_boolean_as_optional
  def test_boolean_as_optional()
    # Parameters for the API call
    body = BooleanAsOptional.from_hash(APIHelper.json_deserialize(
      '{"boolean":true}'
    ))

    # Perform the API call through the SDK function
    result = @controller.boolean_as_optional(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_date_as_optional
  def test_date_as_optional()
    # Parameters for the API call
    body = DateAsOptional.from_hash(APIHelper.json_deserialize(
      '{"date":"1994-02-13"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.date_as_optional(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_dynamic_as_optional
  def test_dynamic_as_optional()
    # Parameters for the API call
    body = DynamicAsOptional.from_hash(APIHelper.json_deserialize(
      '{"dynamic":{"dynamic":"test"}}'
    ))

    # Perform the API call through the SDK function
    result = @controller.dynamic_as_optional(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_string_as_optional
  def test_string_as_optional()
    # Parameters for the API call
    body = StringAsOptional.from_hash(APIHelper.json_deserialize(
      '{"string":"test"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.string_as_optional(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_precision_as_optional
  def test_precision_as_optional()
    # Parameters for the API call
    body = PrecisionAsOptional.from_hash(APIHelper.json_deserialize(
      '{"precision":1.23}'
    ))

    # Perform the API call through the SDK function
    result = @controller.precision_as_optional(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_long_as_optional
  def test_long_as_optional()
    # Parameters for the API call
    body = LongAsOptional.from_hash(APIHelper.json_deserialize(
      '{"long":123123}'
    ))

    # Perform the API call through the SDK function
    result = @controller.long_as_optional(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_number_as_optional
  def test_number_as_optional()
    # Parameters for the API call
    body = NumberAsOptional.from_hash(APIHelper.json_deserialize(
      '{"number":1}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_number_as_optional(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body, check_values: true))
  end

end
