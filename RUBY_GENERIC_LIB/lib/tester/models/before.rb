# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # Before Model.
  class Before < BaseModel
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :use_check_box

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :title

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :message

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['use_check_box'] = 'useCheckBox'
      @_hash['title'] = 'title'
      @_hash['message'] = 'message'
      @_hash
    end

    def initialize(message = nil,
                   title = nil,
                   use_check_box = nil,
                   additional_properties = {})
      @use_check_box = use_check_box
      @title = title
      @message = message

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      message = hash['message']
      title = hash['title']
      use_check_box = hash['useCheckBox']

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      Before.new(message,
                 title,
                 use_check_box,
                 hash)
    end
  end
end
