# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # Company Model.
  class Company < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :company_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :address

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :cell_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :company

    # Discriminators mapping.
    def self.discriminators
      if @_discriminators.nil?
        @_discriminators = {}
        @_discriminators['boss_comp'] = BossCompany
        @_discriminators['empl_comp'] = EmployeeComp
        @_discriminators['Software_Tester'] = SoftwareTester
        @_discriminators['developer'] = Developer
      end
      @_discriminators
    end

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['company_name'] = 'company name'
      @_hash['address'] = 'address'
      @_hash['cell_number'] = 'cell number'
      @_hash['company'] = 'company'
      @_hash
    end

    def initialize(address = nil,
                   cell_number = nil,
                   company_name = nil,
                   company = nil,
                   additional_properties = {})
      @company_name = company_name
      @address = address
      @cell_number = cell_number
      @company = company

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Delegate unboxing to another function if a discriminator
      # value for a child class is present.
      unboxer = discriminators[hash['company']]
      return unboxer.send(:from_hash, hash) if unboxer

      # Extract variables from the hash.
      address = hash['address']
      cell_number = hash['cell number']
      company_name = hash['company name']
      company = hash['company']

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      Company.new(address,
                  cell_number,
                  company_name,
                  company,
                  hash)
    end
  end
end
