# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # Complex5 Model.
  class Complex5 < BaseModel
    # TODO: Write general description for this method
    # @return [ResponseData]
    attr_accessor :response_data

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :response_details

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :response_status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['response_data'] = 'responseData'
      @_hash['response_details'] = 'responseDetails'
      @_hash['response_status'] = 'responseStatus'
      @_hash
    end

    def initialize(response_data = nil,
                   response_status = nil,
                   response_details = nil,
                   additional_properties = {})
      @response_data = response_data
      @response_details = response_details
      @response_status = response_status

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      response_data = ResponseData.from_hash(hash['responseData']) if
        hash['responseData']
      response_status = hash['responseStatus']
      response_details = hash['responseDetails']

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      Complex5.new(response_data,
                   response_status,
                   response_details,
                   hash)
    end
  end
end
