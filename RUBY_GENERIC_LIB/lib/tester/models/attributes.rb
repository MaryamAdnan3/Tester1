# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # Attributes Model.
  class Attributes < BaseModel
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :exclusive_maximum

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :exclusive_minimum

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['exclusive_maximum'] = 'exclusiveMaximum'
      @_hash['exclusive_minimum'] = 'exclusiveMinimum'
      @_hash['id'] = 'id'
      @_hash
    end

    def initialize(exclusive_maximum = nil,
                   exclusive_minimum = nil,
                   id = nil,
                   additional_properties = {})
      @exclusive_maximum = exclusive_maximum
      @exclusive_minimum = exclusive_minimum
      @id = id

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      exclusive_maximum = hash['exclusiveMaximum']
      exclusive_minimum = hash['exclusiveMinimum']
      id = hash['id']

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      Attributes.new(exclusive_maximum,
                     exclusive_minimum,
                     id,
                     hash)
    end
  end
end
