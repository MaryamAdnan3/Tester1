# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # Ui Model.
  class Ui < BaseModel
    # TODO: Write general description for this method
    # @return [Dialogs]
    attr_accessor :dialogs

    # TODO: Write general description for this method
    # @return [LanguageEnum]
    attr_accessor :language

    # TODO: Write general description for this method
    # @return [Styling]
    attr_accessor :styling

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['dialogs'] = 'dialogs'
      @_hash['language'] = 'language'
      @_hash['styling'] = 'styling'
      @_hash
    end

    def initialize(dialogs = nil,
                   language = nil,
                   styling = nil,
                   additional_properties = {})
      @dialogs = dialogs
      @language = language
      @styling = styling

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      dialogs = Dialogs.from_hash(hash['dialogs']) if hash['dialogs']
      language = hash['language']
      styling = Styling.from_hash(hash['styling']) if hash['styling']

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      Ui.new(dialogs,
             language,
             styling,
             hash)
    end
  end
end
