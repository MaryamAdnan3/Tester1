# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # Complex3 Model.
  class Complex3 < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :document_id

    # TODO: Write general description for this method
    # @return [List of Signer]
    attr_accessor :signers

    # TODO: Write general description for this method
    # @return [Status]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :title

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :external_id

    # TODO: Write general description for this method
    # @return [DataToSign]
    attr_accessor :data_to_sign

    # TODO: Write general description for this method
    # @return [ContactDetails]
    attr_accessor :contact_details

    # TODO: Write general description for this method
    # @return [Advanced]
    attr_accessor :advanced

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['document_id'] = 'documentId'
      @_hash['signers'] = 'signers'
      @_hash['status'] = 'status'
      @_hash['title'] = 'title'
      @_hash['description'] = 'description'
      @_hash['external_id'] = 'externalId'
      @_hash['data_to_sign'] = 'dataToSign'
      @_hash['contact_details'] = 'contactDetails'
      @_hash['advanced'] = 'advanced'
      @_hash
    end

    def initialize(advanced = nil,
                   contact_details = nil,
                   data_to_sign = nil,
                   description = nil,
                   document_id = nil,
                   external_id = nil,
                   signers = nil,
                   status = nil,
                   title = nil,
                   additional_properties = {})
      @document_id = document_id
      @signers = signers
      @status = status
      @title = title
      @description = description
      @external_id = external_id
      @data_to_sign = data_to_sign
      @contact_details = contact_details
      @advanced = advanced

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      advanced = Advanced.from_hash(hash['advanced']) if hash['advanced']
      contact_details = ContactDetails.from_hash(hash['contactDetails']) if
        hash['contactDetails']
      data_to_sign = DataToSign.from_hash(hash['dataToSign']) if
        hash['dataToSign']
      description = hash['description']
      document_id = hash['documentId']
      external_id = hash['externalId']
      # Parameter is an array, so we need to iterate through it
      signers = nil
      unless hash['signers'].nil?
        signers = []
        hash['signers'].each do |structure|
          signers << (Signer.from_hash(structure) if structure)
        end
      end
      status = Status.from_hash(hash['status']) if hash['status']
      title = hash['title']

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      Complex3.new(advanced,
                   contact_details,
                   data_to_sign,
                   description,
                   document_id,
                   external_id,
                   signers,
                   status,
                   title,
                   hash)
    end
  end
end
