# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # Complex1 Model.
  class Complex1 < BaseModel
    # TODO: Write general description for this method
    # @return [List of Medication]
    attr_accessor :medications

    # TODO: Write general description for this method
    # @return [List of Lab]
    attr_accessor :labs

    # TODO: Write general description for this method
    # @return [List of Imaging]
    attr_accessor :imaging

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['medications'] = 'medications'
      @_hash['labs'] = 'labs'
      @_hash['imaging'] = 'imaging'
      @_hash
    end

    def initialize(imaging = nil,
                   labs = nil,
                   medications = nil,
                   additional_properties = {})
      @medications = medications
      @labs = labs
      @imaging = imaging

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      imaging = nil
      unless hash['imaging'].nil?
        imaging = []
        hash['imaging'].each do |structure|
          imaging << (Imaging.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      labs = nil
      unless hash['labs'].nil?
        labs = []
        hash['labs'].each do |structure|
          labs << (Lab.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      medications = nil
      unless hash['medications'].nil?
        medications = []
        hash['medications'].each do |structure|
          medications << (Medication.from_hash(structure) if structure)
        end
      end

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      Complex1.new(imaging,
                   labs,
                   medications,
                   hash)
    end
  end
end
