# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'company'

module Tester
  # EmployeeComp Model.
  class EmployeeComp < Company
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :first_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # Discriminators mapping.
    def self.discriminators
      if @_discriminators.nil?
        @_discriminators = {}
        @_discriminators['Software_Tester'] = SoftwareTester
        @_discriminators['developer'] = Developer
      end
      @_discriminators
    end

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['first_name'] = 'first name'
      @_hash['last_name'] = 'last name'
      @_hash['id'] = 'id'
      @_hash = super().merge(@_hash)
      @_hash
    end

    def initialize(address = nil,
                   cell_number = nil,
                   company_name = nil,
                   first_name = nil,
                   id = nil,
                   last_name = nil,
                   company = nil,
                   additional_properties = {})
      @first_name = first_name
      @last_name = last_name
      @id = id

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end

      # Call the constructor of the base class
      super(address,
            cell_number,
            company_name,
            company)
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Delegate unboxing to another function if a discriminator
      # value for a child class is present.
      unboxer = discriminators[hash['company']]
      return unboxer.send(:from_hash, hash) if unboxer

      # Extract variables from the hash.
      address = hash['address']
      cell_number = hash['cell number']
      company_name = hash['company name']
      first_name = hash['first name']
      id = hash['id']
      last_name = hash['last name']
      company = hash['company']

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      EmployeeComp.new(address,
                       cell_number,
                       company_name,
                       first_name,
                       id,
                       last_name,
                       company,
                       hash)
    end
  end
end
