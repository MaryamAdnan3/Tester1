# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # An enum for SDK environments.
  class Environment
    ENVIRONMENT = [
      PRODUCTION = 'production'.freeze,
      TESTING = 'testing'.freeze
    ].freeze
  end

  # An enum for API servers.
  class Server
    SERVER = [
      DEFAULT = 'default'.freeze,
      AUTH_SERVER = 'auth server'.freeze
    ].freeze
  end

  # All configuration including auth info and base URI for the API access
  # are configured in this class.
  class Configuration
    # The attribute readers for properties.
    attr_reader :http_client
    attr_reader :timeout
    attr_reader :max_retries
    attr_reader :retry_interval
    attr_reader :backoff_factor
    attr_reader :retry_statuses
    attr_reader :retry_methods
    attr_reader :environment
    attr_reader :port
    attr_reader :suites

    class << self
      attr_reader :environments
    end

    def initialize(timeout: 60, max_retries: 3, retry_interval: 1,
                   backoff_factor: 2,
                   retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                   retry_methods: %i[get put],
                   environment: Environment::TESTING, port: '80',
                   suites: SuiteCode::HEARTS)
      # The value to use for connection timeout
      @timeout = timeout

      # The number of times to retry an endpoint call if it fails
      @max_retries = max_retries

      # Pause in seconds between retries
      @retry_interval = retry_interval

      # The amount to multiply each successive retry's interval amount
      # by in order to provide backoff
      @backoff_factor = backoff_factor

      # A list of HTTP statuses to retry
      @retry_statuses = retry_statuses

      # A list of HTTP methods to retry
      @retry_methods = retry_methods

      # Current API environment
      @environment = String(environment)

      # port value
      @port = port

      # suites value
      @suites = suites

      # The Http Client to use for making requests.
      @http_client = create_http_client
    end

    def clone_with(timeout: nil, max_retries: nil, retry_interval: nil,
                   backoff_factor: nil, retry_statuses: nil, retry_methods: nil,
                   environment: nil, port: nil, suites: nil)
      timeout ||= self.timeout
      max_retries ||= self.max_retries
      retry_interval ||= self.retry_interval
      backoff_factor ||= self.backoff_factor
      retry_statuses ||= self.retry_statuses
      retry_methods ||= self.retry_methods
      environment ||= self.environment
      port ||= self.port
      suites ||= self.suites

      Configuration.new(timeout: timeout, max_retries: max_retries,
                        retry_interval: retry_interval,
                        backoff_factor: backoff_factor,
                        retry_statuses: retry_statuses,
                        retry_methods: retry_methods, environment: environment,
                        port: port, suites: suites)
    end

    def create_http_client
      FaradayClient.new(timeout: timeout, max_retries: max_retries,
                        retry_interval: retry_interval,
                        backoff_factor: backoff_factor,
                        retry_statuses: retry_statuses,
                        retry_methods: retry_methods)
    end

    # All the environments the SDK can run in.
    ENVIRONMENTS = {
      Environment::PRODUCTION => {
        Server::DEFAULT => 'http://apimatic.hopto.org:{suites}',
        Server::AUTH_SERVER => 'http://apimaticauth.hopto.org:3000'
      },
      Environment::TESTING => {
        Server::DEFAULT => 'http://localhost:3000',
        Server::AUTH_SERVER => 'http://apimaticauth.xhopto.org:3000'
      }
    }.freeze

    # Generates the appropriate base URI for the environment and the server.
    # @param [Configuration::Server] The server enum for which the base URI is
    # required.
    # @return [String] The base URI.
    def get_base_uri(server = Server::DEFAULT)
      parameters = {
        'port' => { 'value' => port, 'encode' => false },
        'suites' => { 'value' => suites, 'encode' => false }
      }
      APIHelper.append_url_with_template_parameters(
        ENVIRONMENTS[environment][server], parameters
      )
    end
  end
end
