# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # ErrorCodesController
  class ErrorCodesController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def catch_412_global_error
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/412'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def get501
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/501'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 501
        raise NestedModelException.new(
          'error 501',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def get400
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/400'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def get500
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/500'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def get401
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/401'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 401
        raise LocalTestException.new(
          '401 Local',
          _response
        )
      elsif _response.status_code == 421
        raise LocalTestException.new(
          'Default',
          _response
        )
      elsif _response.status_code == 431
        raise LocalTestException.new(
          'Default',
          _response
        )
      elsif _response.status_code == 432
        raise LocalTestException.new(
          'Default',
          _response
        )
      elsif _response.status_code == 441
        raise LocalTestException.new(
          'Default',
          _response
        )
      end
      unless _response.status_code.between?(200, 208)
        raise LocalTestException.new(
          'Invalid response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def receive_exception_with_unixtimestamp_exception
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/unixTimeStampException'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise UnixTimeStampException.new(
          'unixtimestamp exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def receive_exception_with_rfc_1123_datetime
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/rfc1123Exception'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise Rfc1123Exception.new(
          'Rfc1123 Exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def receive_exception_with_rfc_3339_datetime
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/Rfc3339InException'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise ExceptionWithRfc3339DateTimeException.new(
          'DateTime Exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Complex5] response from the API call
    def receive_endpoint_level_exception
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/451'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 451
        raise CustomErrorResponseException.new(
          'caught endpoint exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      Complex5.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [Complex5] response from the API call
    def receive_global_level_exception
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/450'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      Complex5.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def date_in_exception
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/dateInException'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise ExceptionWithDateException.new(
          'date in exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def uuid_in_exception
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/uuidInException'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise ExceptionWithUUIDException.new(
          'uuid in exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def dynamic_in_exception
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/dynamicInException'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise ExceptionWithDynamicException.new(
          'dynamic in Exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def precision_in_exception
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/precisionInException'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise ExceptionWithPrecisionException.new(
          'precision in Exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def boolean_in_exception
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/booleanInException'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise ExceptionWithBooleanException.new(
          'Boolean in Exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def long_in_exception
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/longInException'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise ExceptionWithLongException.new(
          'long in exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def number_in_exception
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/numberInException'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise ExceptionWithNumberException.new(
          'number in exception',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def get_exception_with_string
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/error/stringInException'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      if _response.status_code == 444
        raise ExceptionWithStringException.new(
          'exception with string',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
