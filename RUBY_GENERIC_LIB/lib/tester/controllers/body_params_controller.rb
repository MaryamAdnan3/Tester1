# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # BodyParamsController
  class BodyParamsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [String] text_string Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_delete_plain_text(text_string)
      # Validate required parameters.
      validate_parameters(
        'text_string' => text_string
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/deletePlainTextBody'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers,
        parameters: text_string
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DeleteBody] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_delete_body(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/deleteBody'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of Date] dates Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_date_array(dates)
      # Validate required parameters.
      validate_parameters(
        'dates' => dates
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/date'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: dates.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Date] date Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_date(date)
      # Validate required parameters.
      validate_parameters(
        'date' => date
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/date'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: date.to_s
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] datetime Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_unix_date_time(datetime)
      # Validate required parameters.
      validate_parameters(
        'datetime' => datetime
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/unixdatetime'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: datetime.to_time.utc.to_i.to_s
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] datetime Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_rfc1123_date_time(datetime)
      # Validate required parameters.
      validate_parameters(
        'datetime' => datetime
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/rfc1123datetime'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: datetime.httpdate
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] datetime Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_rfc3339_date_time(datetime)
      # Validate required parameters.
      validate_parameters(
        'datetime' => datetime
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/rfc3339datetime'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: datetime.rfc3339
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of DateTime] datetimes Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_unix_date_time_array(datetimes)
      # Validate required parameters.
      validate_parameters(
        'datetimes' => datetimes
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/unixdatetime'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: datetimes.map { |element| element.to_time.utc.to_i }.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of DateTime] datetimes Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_rfc1123_date_time_array(datetimes)
      # Validate required parameters.
      validate_parameters(
        'datetimes' => datetimes
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/rfc1123datetime'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: datetimes.map(&:httpdate).to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of DateTime] datetimes Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_rfc3339_date_time_array(datetimes)
      # Validate required parameters.
      validate_parameters(
        'datetimes' => datetimes
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/rfc3339datetime'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: datetimes.map(&:rfc3339).to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # sends a string body param
    # @param [List of String] sarray Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_string_array(sarray)
      # Validate required parameters.
      validate_parameters(
        'sarray' => sarray
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/string'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: sarray.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] value Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def update_string(value)
      # Validate required parameters.
      validate_parameters(
        'value' => value
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/updateString'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: value
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of Integer] integers Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_integer_array(integers)
      # Validate required parameters.
      validate_parameters(
        'integers' => integers
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/number'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: integers.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] field Required parameter: Example:
    # @param [String] name Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def wrap_body_in_object(field,
                            name)
      # Validate required parameters.
      validate_parameters(
        'field' => field,
        'name' => name
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/wrapParamInObject'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }
      # Prepare wrapper object for body parameters.
      _body_parameters = {
        'field' => field,
        'name' => name
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: _body_parameters.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [AdditionalModelParameters] model Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def additional_model_parameters(model)
      # Validate required parameters.
      validate_parameters(
        'model' => model
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/additionalModelProperties'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: model.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Validate] model Required parameter: Example:
    # @param [String] option Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def validate_required_parameter(model,
                                    option: nil)
      # Validate required parameters.
      validate_parameters(
        'model' => model
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/validateRequiredParam'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'option' => option
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: model.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [AdditionalModelParameters] model Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def additional_model_parameters1(model)
      # Validate required parameters.
      validate_parameters(
        'model' => model
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/additionalModelProperties'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: model.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Employee] model Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_model(model)
      # Validate required parameters.
      validate_parameters(
        'model' => model
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/model'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: model.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of Employee] models Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_model_array(models)
      # Validate required parameters.
      validate_parameters(
        'models' => models
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/model'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: models.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Object] dynamic Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_dynamic(dynamic)
      # Validate required parameters.
      validate_parameters(
        'dynamic' => dynamic
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/dynamic'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: dynamic.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] value Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_string(value)
      # Validate required parameters.
      validate_parameters(
        'value' => value
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/string'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: value
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of Days] days Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_string_enum_array(days)
      # Validate required parameters.
      validate_parameters(
        'days' => days
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/stringenum'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: days.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of SuiteCode] suites Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_integer_enum_array(suites)
      # Validate required parameters.
      validate_parameters(
        'suites' => suites
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/integerenum'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: suites.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Employee] model Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def update_model(model)
      # Validate required parameters.
      validate_parameters(
        'model' => model
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/updateModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: model.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Employee] model Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_delete_body_with_model(model)
      # Validate required parameters.
      validate_parameters(
        'model' => model
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/deleteBody1'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers,
        parameters: model.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of Employee] models Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_delete_body_with_model_array(models)
      # Validate required parameters.
      validate_parameters(
        'models' => models
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/deleteBody1'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers,
        parameters: models.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of Employee] models Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def update_model_array(models)
      # Validate required parameters.
      validate_parameters(
        'models' => models
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/updateModel'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: models.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] value Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def update_string1(value)
      # Validate required parameters.
      validate_parameters(
        'value' => value
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/updateString'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: value
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [List of String] strings Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def update_string_array(strings)
      # Validate required parameters.
      validate_parameters(
        'strings' => strings
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/updateString'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: strings.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [TestNstringEncoding] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_string_with_new_line(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/stringEncoding'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [TestRstringEncoding] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_string_with_r(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/stringEncoding'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [TestRNstringEncoding] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_string_in_body_with_r_n(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/stringEncoding'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] date_time Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_optional_unix_date_time_in_body(date_time: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalUnixTimeStamp'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: date_time.to_time.utc.to_i.to_s
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_optional_rfc1123_in_body(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionlRfc1123'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.httpdate
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] body Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_datetime_optional_in_endpoint(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalDateTime'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'text/plain; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.rfc3339
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [UnixDateTime] date_time Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_optional_unix_time_stamp_in_model_body(date_time)
      # Validate required parameters.
      validate_parameters(
        'date_time' => date_time
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalUnixDateTimeInModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: date_time.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SendUnixDateTime] date_time Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_optional_unix_time_stamp_in_nested_model_body(date_time)
      # Validate required parameters.
      validate_parameters(
        'date_time' => date_time
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalUnixTimeStampInNestedModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: date_time.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SendRfc1123DateTime] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_rfc1123_date_time_in_nested_model(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/rfc1123InNestedModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ModelWithOptionalRfc1123DateTime] date_time Required parameter:
    # Example:
    # @return [ServerResponse] response from the API call
    def send_rfc1123_date_time_in_model(date_time)
      # Validate required parameters.
      validate_parameters(
        'date_time' => date_time
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/OptionalRfc1123InModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: date_time.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ModelWithOptionalRfc3339DateTime] body Required parameter:
    # Example:
    # @return [ServerResponse] response from the API call
    def send_optional_datetime_in_model(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalDateTimeInBody'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SendRfc339DateTime] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_rfc339_date_time_in_nested_models(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/dateTimeInNestedModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [UuidAsOptional] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def uuid_as_optional(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalUUIDInModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BooleanAsOptional] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def boolean_as_optional(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalBooleanInModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateAsOptional] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def date_as_optional(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalDateInModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DynamicAsOptional] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def dynamic_as_optional(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalDynamicInModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [StringAsOptional] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def string_as_optional(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalStringInModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [PrecisionAsOptional] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def precision_as_optional(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalPrecisionInModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [LongAsOptional] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def long_as_optional(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalLongInModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [NumberAsOptional] body Required parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_number_as_optional(body)
      # Validate required parameters.
      validate_parameters(
        'body' => body
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/body/optionalNumberInModel'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end
  end
end
