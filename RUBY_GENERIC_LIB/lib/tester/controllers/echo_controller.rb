# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # EchoController
  class EchoController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Echo's back the request
    # @param [Object] input Required parameter: Example:
    # @return [Mixed] response from the API call
    def json_echo(input)
      # Validate required parameters.
      validate_parameters(
        'input' => input
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'echo' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: input.to_json
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # Sends the request including any form params as JSON
    # @param [Object] input Required parameter: Example:
    # @return [Mixed] response from the API call
    def form_echo(input)
      # Validate required parameters.
      validate_parameters(
        'input' => input
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare form parameters.
      _parameters = {
        'input' => input
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: _parameters
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [Hash] _query_parameters Additional optional query parameters are
    # supported by this endpoint.
    # @return [EchoResponse] response from the API call
    def query_echo(_query_parameters: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        _query_parameters
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      EchoResponse.from_hash(decoded)
    end
  end
end
