# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # BaseController.
  class BaseController
    attr_accessor :config, :http_call_back

    def initialize(config, http_call_back: nil)
      @config = config
      @http_call_back = http_call_back
    end

    def validate_parameters(args)
      args.each do |_name, value|
        if value.nil?
          raise ArgumentError, "Required parameter #{_name} cannot be nil."
        end
      end
    end

    def execute_request(request, binary: false)
      @http_call_back.on_before_request(request) if @http_call_back

      APIHelper.clean_hash(request.headers)

      response = if binary
                   config.http_client.execute_as_binary(request)
                 else
                   config.http_client.execute_as_string(request)
                 end
      @http_call_back.on_after_response(response) if @http_call_back

      response
    end

    def validate_response(response)
      if response.status_code == 400
        raise GlobalTestException.new(
          '400 Global',
          response
        )
      elsif response.status_code == 402
        raise GlobalTestException.new(
          '402 Global',
          response
        )
      elsif response.status_code == 403
        raise GlobalTestException.new(
          '403 Global',
          response
        )
      elsif response.status_code == 404
        raise GlobalTestException.new(
          '404 Global',
          response
        )
      elsif response.status_code == 412
        raise NestedModelException.new(
          'Precondition Failed',
          response
        )
      elsif response.status_code == 450
        raise CustomErrorResponseException.new(
          'caught global exception',
          response
        )
      elsif response.status_code == 452
        raise ExceptionWithStringException.new(
          'global exception with string',
          response
        )
      elsif response.status_code == 453
        raise ExceptionWithBooleanException.new(
          'boolean in global exception',
          response
        )
      elsif response.status_code == 454
        raise ExceptionWithDynamicException.new(
          'dynamic in global exception',
          response
        )
      elsif response.status_code == 455
        raise ExceptionWithUUIDException.new(
          'uuid in global exception',
          response
        )
      elsif response.status_code == 456
        raise ExceptionWithDateException.new(
          'date in global exception',
          response
        )
      elsif response.status_code == 457
        raise ExceptionWithNumberException.new(
          'number in global  exception',
          response
        )
      elsif response.status_code == 458
        raise ExceptionWithLongException.new(
          'long in global exception',
          response
        )
      elsif response.status_code == 459
        raise ExceptionWithPrecisionException.new(
          'precision in global  exception',
          response
        )
      elsif response.status_code == 460
        raise ExceptionWithRfc3339DateTimeException.new(
          'rfc3339 in global exception',
          response
        )
      elsif response.status_code == 461
        raise UnixTimeStampException.new(
          'unix time stamp in global exception',
          response
        )
      elsif response.status_code == 462
        raise Rfc1123Exception.new(
          'rfc1123 in global exception',
          response
        )
      elsif response.status_code == 463
        raise SendBooleanInModelAsException.new(
          'boolean in model as global exception',
          response
        )
      elsif response.status_code == 464
        raise SendRfc3339InModelAsException.new(
          'rfc3339 in model as global exception',
          response
        )
      elsif response.status_code == 465
        raise SendRfc1123InModelAsException.new(
          'rfc1123 in model as global exception',
          response
        )
      elsif response.status_code == 466
        raise SendUnixTimeStampInModelAsException.new(
          'unix time stamp in model as global exception',
          response
        )
      elsif response.status_code == 467
        raise SendDateInModelAsException.new(
          'send date in model as global exception',
          response
        )
      elsif response.status_code == 468
        raise SendDynamicInModelAsException.new(
          'send dynamic in model as global exception',
          response
        )
      elsif response.status_code == 469
        raise SendStringInModelAsException.new(
          'send string in model as global exception',
          response
        )
      elsif response.status_code == 470
        raise SendLongInModelAsException.new(
          'send long in model as global exception',
          response
        )
      elsif response.status_code == 471
        raise SendNumberInModelAsException.new(
          'send number in model as global exception',
          response
        )
      elsif response.status_code == 472
        raise SendPrecisionInModelAsException.new(
          'send precision in model as global exception',
          response
        )
      elsif response.status_code == 473
        raise SendUuidInModelAsException.new(
          'send uuid in model as global exception',
          response
        )
      elsif response.status_code == 500
        raise GlobalTestException.new(
          '500 Global',
          response
        )
      end
      raise GlobalTestException.new 'Invalid response.', response unless
        response.status_code.between?(200, 208) # [200,208] = HTTP OK
    end
  end
end
