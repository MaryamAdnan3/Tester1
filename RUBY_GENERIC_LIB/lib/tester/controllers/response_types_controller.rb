# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'

module Tester
  # ResponseTypesController
  class ResponseTypesController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @return [List of Date] response from the API call
    def get_date_array
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/date'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded.map { |element| Date.iso8601(element) }
    end

    # TODO: type endpoint description here
    # @return [Date] response from the API call
    def get_date
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/date'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      Date.iso8601(_response.raw_body)
    end

    # TODO: type endpoint description here
    # @return [Company] response from the API call
    def return_company_model
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/company'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      Company.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [BossCompany] response from the API call
    def return_boss_model
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/boss'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      BossCompany.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [EmployeeComp] response from the API call
    def return_employee_model
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/employee'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      EmployeeComp.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [Developer] response from the API call
    def return_developer_model
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/developer'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      Developer.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [SoftwareTester] response from the API call
    def return_tester_model
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/tester'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      SoftwareTester.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [Complex1] response from the API call
    def return_complex1_object
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/complex1'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      Complex1.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [ResponseWithEnum] response from the API call
    def return_response_with_enums
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/responseWitEnum'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ResponseWithEnum.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [Complex2] response from the API call
    def return_complex2_object
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/complex2'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      Complex2.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [Complex3] response from the API call
    def return_complex3_object
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/complex3'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      Complex3.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [Long] response from the API call
    def get_long
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DEFAULT)
      _query_builder << '/response/long'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      _response.raw_body.to_i
    end

    # TODO: type endpoint description here
    # @return [Person] response from the API call
    def get_model
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/model'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      Person.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @return [List of Days] response from the API call
    def get_string_enum_array
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/enum'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true,
        'type' => 'string'
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded
    end

    # TODO: type endpoint description here
    # @return [Days] response from the API call
    def get_string_enum
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/enum'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'type' => 'string'
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      _response.raw_body
    end

    # TODO: type endpoint description here
    # @return [List of Person] response from the API call
    def get_model_array
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/model'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded.map { |element| Person.from_hash(element) }
    end

    # TODO: type endpoint description here
    # @return [SuiteCode] response from the API call
    def get_int_enum
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/enum'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'type' => 'int'
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      _response.raw_body.to_i
    end

    # TODO: type endpoint description here
    # @return [List of SuiteCode] response from the API call
    def get_int_enum_array
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/enum'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true,
        'type' => 'int'
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded
    end

    # TODO: type endpoint description here
    # @return [Float] response from the API call
    def get_precision
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/precision'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      _response.raw_body.to_f
    end

    # gets a binary object
    # @return [Binary] response from the API call
    def get_binary
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/binary'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request, binary: true)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      _response.raw_body
    end

    # Gets a integer response
    # @return [Integer] response from the API call
    def get_integer
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/integer'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      _response.raw_body.to_i
    end

    # Get an array of integers.
    # @return [List of Integer] response from the API call
    def get_integer_array
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/integer'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def get_dynamic
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/dynamic'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'echo' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [Mixed] response from the API call
    def get_dynamic_array
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/dynamic'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true,
        'echo' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @return [DateTime] response from the API call
    def get_3339_datetime
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/3339datetime'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      DateTime.rfc3339(_response.raw_body)
    end

    # TODO: type endpoint description here
    # @return [List of DateTime] response from the API call
    def get_3339_datetime_array
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/3339datetime'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded.map { |element| DateTime.rfc3339(element) }
    end

    # TODO: type endpoint description here
    # @return [Boolean] response from the API call
    def get_boolean
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/boolean'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      _response.raw_body.downcase! == 'true'
    end

    # TODO: type endpoint description here
    # @return [List of Boolean] response from the API call
    def get_boolean_array
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/boolean'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded
    end

    # TODO: type endpoint description here
    # @return [void] response from the API call
    def get_headers
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/headers'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)
      validate_response(_response)
    end

    # TODO: type endpoint description here
    # @return [DateTime] response from the API call
    def get_1123_date_time
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/1123datetime'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      DateTime.httpdate(_response.raw_body)
    end

    # TODO: type endpoint description here
    # @return [DateTime] response from the API call
    def get_unix_date_time
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/unixdatetime'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      Time.at(_response.raw_body.to_i).utc.to_datetime
    end

    # TODO: type endpoint description here
    # @return [List of DateTime] response from the API call
    def get_1123_date_time_array
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/1123datetime'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded.map { |element| DateTime.httpdate(element) }
    end

    # TODO: type endpoint description here
    # @return [List of DateTime] response from the API call
    def get_unix_date_time_array
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/unixdatetime'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'array' => true
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded.map { |element| Time.at(element).utc.to_datetime }
    end

    # TODO: type endpoint description here
    # @return [void] response from the API call
    def get_content_type_headers
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/response/getContentType'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url
      )
      _response = execute_request(_request)
      validate_response(_response)
    end
  end
end
