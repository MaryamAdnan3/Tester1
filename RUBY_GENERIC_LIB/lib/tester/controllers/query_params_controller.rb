# tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Tester
  # QueryParamsController
  class QueryParamsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [Integer] number Required parameter: Example:
    # @param [Integer] number1 Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_number_as_optional(number,
                                number1: nil)
      # Validate required parameters.
      validate_parameters(
        'number' => number
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/query/numberAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'number' => number,
        'number1' => number1
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Long] long Required parameter: Example:
    # @param [Long] long1 Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_long_as_optional(long,
                              long1: nil)
      # Validate required parameters.
      validate_parameters(
        'long' => long
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/query/longAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'long' => long,
        'long1' => long1
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Float] precision Required parameter: Example:
    # @param [Float] precision1 Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def precision_as_optional(precision,
                              precision1: nil)
      # Validate required parameters.
      validate_parameters(
        'precision' => precision
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/query/precisionAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'precision' => precision,
        'precision1' => precision1
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Boolean] boolean Required parameter: Example:
    # @param [Boolean] boolean1 Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def boolean_as_optional(boolean,
                            boolean1: nil)
      # Validate required parameters.
      validate_parameters(
        'boolean' => boolean
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/query/booleanAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'boolean' => boolean,
        'boolean1' => boolean1
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] date_time Required parameter: Example:
    # @param [DateTime] date_time1 Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def rfc1123_datetime_as_optional(date_time,
                                     date_time1: nil)
      # Validate required parameters.
      validate_parameters(
        'date_time' => date_time
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/query/rfc1123dateTimeAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'dateTime' => date_time.httpdate,
        'dateTime1' => date_time1.httpdate
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] date_time Required parameter: Example:
    # @param [DateTime] date_time1 Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def rfc3339_datetime_as_optional(date_time,
                                     date_time1: nil)
      # Validate required parameters.
      validate_parameters(
        'date_time' => date_time
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/query/rfc3339dateTimeAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'dateTime' => date_time,
        'dateTime1' => date_time1
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [Date] date Required parameter: Example:
    # @param [Date] date1 Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_date_as_optional(date,
                              date1: nil)
      # Validate required parameters.
      validate_parameters(
        'date' => date
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/query/dateAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'date' => date,
        'date1' => date1
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] string Required parameter: Example:
    # @param [String] string1 Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def send_string_as_optional(string,
                                string1: nil)
      # Validate required parameters.
      validate_parameters(
        'string' => string
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/query/stringAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'string' => string,
        'string1' => string1
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [DateTime] date_time Required parameter: Example:
    # @param [DateTime] date_time1 Optional parameter: Example:
    # @return [ServerResponse] response from the API call
    def unixdatetime_as_optional(date_time,
                                 date_time1: nil)
      # Validate required parameters.
      validate_parameters(
        'date_time' => date_time
      )
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/query/unixdateTimeAsOptional'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'dateTime' => date_time.to_time.utc.to_i,
        'dateTime1' => date_time1.to_time.utc.to_i
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      return nil if _response.status_code == 404
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ServerResponse.from_hash(decoded)
    end
  end
end
